<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Dynamic Grid with Clickable Links</title>
  <style>
    body {
      margin: 0;
      padding: 0;
    }
    
    #grid-container {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: 10px;
      padding: 20px;
    }
    
    .grid-item {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100px;
      background-color: #f0f0f0;
      text-decoration: none;
      color: #333;
      font-size: 18px;
      border: 1px solid #ccc;
      cursor: move;
    }
  </style>
</head>
<body>
  <div id="grid-container">
    <!-- Replace the links and link texts with your desired URLs and texts -->
    <a class="grid-item" href="https://www.example.com">Link 1</a>
    <a class="grid-item" href="https://www.example.com">Link 2</a>
    <!-- Add more links here -->
  </div>
  <script src="https://cdn.jsdelivr.net/npm/@interactjs/interactjs@1.10.11"></script>
  <script>
    // Make the grid moveable using interact.js library

    // Add a class 'draggable' to each grid item
    const gridItems = document.querySelectorAll('.grid-item');
    gridItems.forEach((item) => item.classList.add('draggable'));

    // Function to make the grid items draggable
    function makeItemsDraggable() {
      interact('.draggable')
        .draggable({
          // Enable inertial throwing
          inertia: true,
          // Restrict dragging within the grid container
          restrict: {
            restriction: "parent",
            endOnly: true,
            elementRect: { top: 0, left: 0, bottom: 1, right: 1 }
          },
          // Enable autoScroll
          autoScroll: true,
          // Call this function on every dragmove event
          onmove: dragMoveListener,
        });
    }

    // Function to handle drag move events
    function dragMoveListener(event) {
      const target = event.target;
      // Keep the dragged position in the data-x/data-y attributes
      const x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx;
      const y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;

      // Translate the element's position
      target.style.transform = `translate(${x}px, ${y}px)`;

      // Update the data-x and data-y attributes with the new position
      target.setAttribute('data-x', x);
      target.setAttribute('data-y', y);
    }

    // Call the function to make the grid items draggable
    makeItemsDraggable();
  </script>
</body>
</html>
